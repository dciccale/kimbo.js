{"version":3,"sources":["kimbo.js"],"names":["window","document","Kimbo","selector","context","match","div","fragment","this","exec","getElementById","length","charAt","createElement","innerHTML","add","childNodes","createDocumentFragment","append","_","kimbo","rootContext","find","nodeType","isFunction","ready","makeArray","modules","push","Array","prototype","slice","element","require","module","define","fn","constructor","callback","_completed","removeEventListener","call","test","readyState","addEventListener","get","index","arguments","splice","forEach","obj","i","l","isArrayLike","isArray","NodeList","undefined","hasOwnProperty","extend","objs","target","deep","cut","source","key","value","src","isObject","ref","Math","random","replace","amd","$","ID_RE","CLASS_RE","TAG_RE","NAME_RE","_find","sel","els","getElementsByClassName","getElementsByTagName","getElementsByName","querySelectorAll","_contains","el1","el2","contains","cache","dataId","data","el","dataCache","_dataId","dataset","set","elementId","remove","camelCase","isString","each","removeData","_getComputedStyle","property","toLowerCase","getComputedStyle","getPropertyValue","_createIframe","iframe","documentElement","appendChild","_getActualDisplay","nodeName","doc","elem","display","body","parentNode","removeChild","CSS_NO_PX","fontWeight","lineHeight","opacity","zIndex","elementsDisplay","show","contentWindow","contentDocument","write","close","style","hide","css","_applyCss","name","isNumeric","that","_hasClass","classList","SPACE_RE","BOOLEAN_ATTR","text","html","val","method","prop","isRemove","classNames","split","className","removeAttr","isPrepend","trim","firstChild","child","insertBefore","empty","hasChildNodes","attr","lowercasedName","attributes","getNamedItem","specified","getAttribute","setAttribute","removeAttribute","toggleClass","state","isBoolean","hasClass","has","clone","cloneNode","_matches","_matchesSelector","_unique","array","filter","item","indexOf","_sibling","node","result","nextSibling","_singleSibling","query","_filter","IS_UNIQUE","children","contents","next","prev","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","ret","eq","first","last","apply","map","len","n","r","elems","closest","_closest","all","merge","is","parent","siblings","ANDROID_RE","BLACKBERRY_RE","FIREFOXOS_RE","IPAD_RE","IPHONE_RE","WEBOS","MOBILE_OS_RE","RegExp","isMobile","objectTypes","toString","Object","type","typeOf","String","isNaN","parseFloat","isFinite","isWindow","isEmptyObject","navigator","userAgent","parseJSON","JSON","parse","parseXML","domparser","xml","DOMParser","parseFromString","Error","values","concat","results","second","str","character","toUpperCase","_fixEvent","event","originalEvent","eventProps","props","fixEventProps","DEFAULT_EVENT_PROPS","Event","_getElementId","_guid","_getHandlers","events","handlersHash","_addEvent","elementHandlers","origType","handlers","handleObj","handler","specialEvents","_dispatchEvent","delegateCount","_removeEvent","_triggerEvent","currentElement","lastElement","eventTree","special","isTrigger","unshift","ownerDocument","branch","selMatch","matches","args","handlerQueue","delegateTarget","disabled","isPropagationStopped","currentTarget","isImmediatePropagationStopped","handle","preventDefault","stopPropagation","_returnFalse","_returnTrue","MOUSE_EVENT_RE","KEY_EVENT_RE","MOUSE_EVENT_PROPS","KEY_EVENT_PROPS","GESTURES_FALLBACK","touchstart","touchmove","touchend","touch","doubletap","orientationchange","isDefaultPrevented","defaultPrevented","timeStamp","Date","now","stopImmediatePropagation","on","off","trigger","mouseenter","mouseleave","orig","fix","related","relatedTarget","_getResponse","response","dataParse","_handleResponse","xhr","settings","contentType","dataType","getResponseHeader","MIME_TYPES","_setHeaders","responseText","e","xhrCallbacks","error","crossDomain","headers","Accept","_timeout","onreadystatechange","abort","_createAbortTimeout","setTimeout","timeout","_getJSONP","abortTimeout","jsonpCallback","script","head","clearTimeout","url","JSONP_RE","statusText","status","success","NO_CONTENT_RE","json","res","msg","ajaxSettings","async","XMLHttpRequest","ajax","options","hasContent","param","onload","open","header","setRequestHeader","send","getScript","getJSON","params","encodeURIComponent","unescape"],"mappings":"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","file":"kimbo.min.js","sourcesContent":["/*!\n* kimbo v1.1.0 - 2015-15-06\n* http://kimbojs.com\n* Copyright (c) 2015 Denis Ciccale (@tdecs)\n* Released under the MIT license\n* https://github.com/dciccale/kimbo.js/blob/master/LICENSE.txt\n*/\n(function (window, document) {\n\n  'use strict';\n\n  /*\\\n   * $\n   [ object ]\n   * Global namespace for using Kimbo functions\n  \\*/\n\n  // Kimbo modules\n  var modules = {};\n\n  // Common helpers\n  var _ = {\n\n    // Array methods\n    push: Array.prototype.push,\n    slice: Array.prototype.slice,\n\n    // Reference to the current document\n    rootContext: document,\n\n    // Creates and returns a new Kimbo object\n    kimbo: function (element, context) {\n      return new Kimbo(element, context);\n    }\n  };\n\n  /*\\\n   * $(…)\n   * Kimbo object collection.\n   * All methods called from a Kimbo collection affects all elements in it.\n  \\*/\n  function Kimbo(selector, context) {\n    var match, div, fragment;\n\n    // Auto create a new instance of Kimbo if needed\n    if (!(this instanceof Kimbo)) {\n      return new Kimbo(selector, context);\n    }\n\n    // No selector, return empty Kimbo object\n    if (!selector) {\n      return this;\n    }\n\n    // Asume a css selector or html string\n    if (typeof selector === 'string') {\n\n      // Handle faster $('#id');\n      match = /^#([\\w\\-]+)$/.exec(selector);\n      if (match && match[1]) {\n        match = document.getElementById(match[1]);\n\n        if (match) {\n          this[0] = match;\n          this.length = 1;\n        }\n\n        return this;\n      }\n\n      // Create html from string\n      if (selector.charAt(0) === '<') {\n        div = document.createElement('div');\n        div.innerHTML = selector;\n        this.add(div.childNodes);\n        fragment = new Kimbo(document.createDocumentFragment());\n        // Detach the elements from the temporary DOM div.\n        fragment.append(this);\n\n        return this;\n      }\n\n      // All other selectors\n      context = context ? _.kimbo(context) : _.rootContext;\n      return context.find(selector);\n    }\n\n    // Already a dom element\n    if (selector.nodeType) {\n      this[0] = selector;\n      this.length = 1;\n      return this;\n    }\n\n    // Is a function, call it when DOM is ready\n    if (Kimbo.isFunction(selector)) {\n      return _.rootContext.ready(selector);\n    }\n\n    // Handle kimbo object, plain objects or other objects\n    return Kimbo.makeArray(selector, this);\n  }\n\n  Kimbo.require = function (module) {\n    return modules[module];\n  };\n\n  Kimbo.define = function (module, fn) {\n    modules[module] = fn(_);\n  };\n\n  /*\n   * Kimbo prototype aliased as fn\n   */\n  Kimbo.fn = Kimbo.prototype = {\n    constructor: Kimbo,\n\n    /*\\\n     * $(…).length\n     [ property ]\n     * The length of the current Kimbo collection.\n     = (number) Integer representing the lenght of the current collection.\n     > Usage\n     * Having these paragraphs:\n     | <p>one</p>\n     | <p>two</p>\n     | <p>three</p>\n     * Grab them and check for the length property:\n     | $('p').length; // 3\n    \\*/\n    length: 0,\n\n    /*\\\n     * $(…).ready\n     [ method ]\n     * Execute a callback after de DOM is completely loaded\n     > Parameters\n     - callback (function) A function to call after de DOM is ready\n     = (object) The original element\n     > Usage\n     | $(document).ready(function () {\n     |   console.log('the DOM is loaded!');\n     | });\n     * Or using the shortcut (recommended)\n     | $(function () {\n     |   console.log('the DOM is loaded!);\n     | });\n    \\*/\n    ready: function (callback) {\n      function _completed() {\n        document.removeEventListener('DOMContentLoaded', _completed, false);\n        callback.call(document);\n      }\n\n      // First check if already loaded, interactive or complete state so the t is enough\n      if (/t/.test(document.readyState)) {\n\n        // Execute the callback\n        callback.call(document);\n\n      // If not listen for when it loads\n      } else {\n\n        // Register the event\n        document.addEventListener('DOMContentLoaded', _completed, false);\n      }\n\n      // Return the Kimbo wrapped document\n      return _.rootContext;\n    },\n\n    /*\\\n     * $(…).get\n     [ method ]\n     * Retrieve native DOM elements from the current collection\n     > Parameters\n     - index (number) #optional A zero-based integer indicating which element to retrieve, supports going backwards with negative index.\n     = (array|object) An array of the native DOM elements or the specified element by index matched by Kimbo.\n     > Usage\n     | <ul>\n     |   <li id=\"foo\"></li>\n     |   <li id=\"bar\"></li>\n     | </ul>\n     * Get standard array of elements\n     | $('li').get(); // [<li id=\"foo\">, <li id=\"bar\">]\n     * Get the first element\n     | $('li').get(0); // <li id=\"foo\">\n     * Get the last element\n     | $('li').get(-1); // <li id=\"bar\">\n    \\*/\n    get: function (index) {\n      if (!this.length) {\n        return;\n      }\n\n      // If no index specified return a new set\n      // Else return the element in the specified positive index or backwards if negative\n      return (!arguments.length) ? _.slice.call(this) :\n        (index < 0 ? this[this.length + index] : this[index]);\n    },\n\n    // Needed to have an array-like object\n    splice: Array.prototype.splice\n  };\n\n  /*\\\n   * $.forEach\n   [ method ]\n   * Iterator function that can be used to seamlessly iterate over both objects and arrays.\n   > Parameters\n   - obj (object) Object or array to iterate\n   - callback (function) Function that will be executed on each iteration\n   = (object) The original array or object\n   > Usage\n   | // Iterating array\n   | $.forEach(['a', 'b', 'c'], function (value, index) {\n   |   alert(value + ': ' + index);\n   | });\n   |\n   | // Iterating object\n   | $.forEach({name: 'Denis', surname: 'Ciccale'}, function (key, value) {\n   |   alert(key + ': ' + value);\n   | });\n  \\*/\n  Kimbo.forEach = function (obj, callback) {\n    var l = obj.length;\n    var isArrayLike = Array.isArray(obj) || obj instanceof Kimbo ||\n      obj instanceof window.NodeList || !((l !== undefined) || !l);\n    var i;\n\n    if (isArrayLike) {\n      for (i = 0; i < l; i++) {\n        if (callback.call(obj[i], obj[i], i, obj) === false) {\n          break;\n        }\n      }\n    } else {\n      for (i in obj) {\n        if (obj.hasOwnProperty(i) && callback.call(obj[i], i, obj[i], obj) === false) {\n          break;\n        }\n      }\n    }\n\n    // Return original obj\n    return obj;\n  };\n\n\n  /*\\\n   * $.extend\n   [ method ]\n   * Merge the contents of two or more objects together into the first object.\n   > Parameters\n   - target (object|boolean) Object that will receive the merged properties if objects are passed, or target will extend Kimbo object. If target is `true` the passed objects will be recursively merged.\n   - objectN (object) #optional One or more objects with additional properties.\n   = (object) The extended target or a new copy if target is an empty object.\n   > Usage\n   * When passing two or more objects, all properties will be merged into the target object.\n   | var obj1 = { msg: 'hi', info: { from: 'Denis' }};\n   | var obj2 = { msg: 'Hi!', info: { time: '22:00PM' }};\n   |\n   | // Merge obj1 into obj2\n   | $.extend(obj1, obj2);\n   |\n   | // Now obj1 is equal to:\n   | { msg: 'Hi!', info: { time: '22:00PM' }}\n   * If an empty target object is passed, none of the other objects will be directly modified\n   | // Pass an empty target\n   | var obj3 = $.extend({}, obj1, obj);\n   * To do a recursive merge, pass true as first argument, then the objects to merge\n   | $.extend(true, obj1, obj2);\n   | // Obj1 will be:\n   | { msg: 'Hi!', info: { from: 'Denis', time: '22:00PM' }}\n  \\*/\n  Kimbo.extend = Kimbo.fn.extend = function () {\n    var objs = arguments;\n    var target = objs[0] || {};\n    var deep = (target === true);\n    var cut = 1;\n\n    // Check for deep copy\n    if (deep) {\n      target = objs[1] || {};\n      cut = 2;\n\n    // Extend Kimbo itself if only one argument is passed\n    } else if (objs.length === 1) {\n      target = this;\n      cut = 0;\n    }\n\n    // Make an array from the arguments removing the target and/or the deep boolean\n    objs = _.slice.call(objs, cut);\n\n    // Loop through the objects\n    Kimbo.forEach(objs, function (source) {\n\n      // Populate target from source\n      Kimbo.forEach(source, function (key, value) {\n        var src;\n\n        if (deep && (Kimbo.isObject(value) || Kimbo.isArray(value))) {\n          src = target[key];\n          target[key] = Kimbo.extend(deep, src, value);\n\n        } else if (value !== undefined) {\n          target[key] = value;\n        }\n      });\n    });\n\n    return target;\n  };\n\n  // Unique reference for the current instance of Kimbo\n  Kimbo.ref = 'kimbo' + ('1' + Math.random()).replace(/\\D/g, '');\n\n  // Expose Kimbo as an AMD module\n  if (typeof window.define === 'function' && window.define.amd) {\n    window.define('kimbo', [], function () {\n      return Kimbo;\n    });\n  }\n\n  // Expose Kimbo to global object\n  window.Kimbo = window.$ = Kimbo;\n\n}(window, window.document));\n\nKimbo.define('query', function (_) {\n\n  'use strict';\n\n  // Selector regexes\n  var ID_RE = /^#([\\w\\-]+)$/;\n  var CLASS_RE = /^\\.([\\w\\-]+)$/;\n  var TAG_RE = /^[\\w\\-]+$/;\n  var NAME_RE = /^\\[name=[\"']?([\\w\\-]+)[\"']?\\]$/;\n\n  // Use querySelectoAll but optimize for id, class, tagName and name\n  var _find = function (element, selector) {\n    var els = [], sel;\n\n    // #id\n    if (element === document && (sel = ID_RE.exec(selector))) {\n      els = [element.getElementById(sel[1])];\n\n    // .class\n    } else if ((sel = CLASS_RE.exec(selector))) {\n      els = element.getElementsByClassName(sel[1]);\n\n    // tag\n    } else if (TAG_RE.test(selector)) {\n      els = element.getElementsByTagName(selector);\n\n    // [name=val]\n    } else if ((sel = NAME_RE.exec(selector))) {\n      els = element.getElementsByName(sel[1]);\n\n    // Other CSS selectors\n    } else {\n      els = element.querySelectorAll(selector);\n    }\n\n    // Return NodeList/Node as an array\n    return _.slice.call(els);\n  };\n\n  // DOM Level 4 contains improved\n  var _contains = function (el1, el2) {\n    return (el1 === window && (el2 && (el2 === window || el2.nodeType))) ||\n      ((el1 && el1.nodeType) &&\n     (el2 && el2.nodeType)) ? (el1.contains ? el1.contains(el2) : true) : false;\n  };\n\n  return {\n    find: _find,\n    contains: _contains\n  };\n});\n\nKimbo.define('data', function () {\n\n  'use strict';\n\n  var cache = {};\n  var dataId = 1;\n\n  var data = {\n    get: function (el, key) {\n      var dataCache = cache[el._dataId];\n      var value;\n\n      // Look first in cached data\n      if (dataCache) {\n        value = dataCache[key];\n\n      // If none, try dataset\n      } else {\n        value = el.dataset[key];\n\n        // Cache the value\n        if (value) {\n          this.set(el, key, value);\n        }\n      }\n\n      return value;\n    },\n\n    set: function (el, key, value) {\n      var elementId = el._dataId || (el._dataId = dataId++);\n      var dataCache = cache[elementId];\n\n      // Create data cache for the current element if necessary\n      if (!dataCache) {\n        dataCache = cache[elementId] = {};\n      }\n\n      dataCache[key] = value;\n    },\n\n    remove: function (el, key) {\n      var dataCache = cache[el._dataId];\n      if (dataCache) {\n        if (key) {\n          key = Kimbo.camelCase(key);\n          delete cache[el._dataId][key];\n          return;\n        }\n\n        delete cache[el._dataId];\n      }\n    }\n  };\n\n  Kimbo.fn.extend({\n    /*\\\n     * $(…).data\n     [ method ]\n     * Store or retrieve elements dataset.\n     > Parameters\n     - key (string) Key of the data attribute to to set.\n     - value (string) #optional Value to store in dataset.\n     = (object) Original matched collection.\n     > Usage\n     | <div id=\"panel\"></div>\n     * Set some data to the panel:\n     | $('#panel').data('isOpen', true);\n     * No a data-* attribute was added\n     | <div id=\"panel\" data-isOpen=\"true\"></div>\n     * We can retrieve the data\n     | $('#panel').data('isOpen'); // 'true'\n    \\*/\n    data: function (key, value) {\n      if (!this.length || !Kimbo.isString(key)) {\n        return this;\n      }\n\n      key = Kimbo.camelCase(key);\n\n      // Get\n      if (value === undefined) {\n        return data.get(this[0], key);\n\n      // Set\n      } else {\n        return this.each(function (el) {\n          data.set(el, key, value);\n        });\n      }\n    },\n\n    /*\\\n     * $(…).removeData\n     [ method ]\n     * Remove data from the element dataset.\n     > Parameters\n     - key (string) Key of the data attribute to to remove.\n     = (object) Original matched collection.\n     > Usage\n     | <div id=\"panel\" data-isOpen=\"true\"></div>\n     * Remove data associated to the panel div:\n     | $('#panel').removeData('isOpen');\n     * Data attribute and value was removed:\n     | <div id=\"panel\"></div>\n     * data-isOpen is undefined\n     | $('#panel').data('isOpen'); // Undefined\n    \\*/\n    removeData: function (key) {\n      if (!this.length) {\n        return this;\n      }\n\n      return this.each(function (el) {\n        data.remove(el, key);\n      });\n    }\n  });\n\n  return data;\n});\n\nKimbo.define('css', function () {\n\n  'use strict';\n\n  // Properties without 'px' at the end\n  var CSS_NO_PX = {\n    fontWeight: true,\n    lineHeight: true,\n    opacity: true,\n    zIndex: true\n  };\n\n  var iframe = null;\n  var elementsDisplay = {};\n\n  // Wrap native to extend behavoiur\n  function _getComputedStyle(element, property) {\n\n    // Support both camelCase and dashed property names\n    property = property.replace(/([A-Z])/g, '-$1').toLowerCase();\n\n    return window.getComputedStyle(element, null).getPropertyValue(property);\n  }\n\n\n  function _createIframe() {\n    iframe = document.createElement('iframe');\n    document.documentElement.appendChild(iframe);\n    return iframe;\n  }\n\n  function _getActualDisplay(nodeName, doc) {\n    doc = doc || document;\n\n    var elem, display;\n\n    // Create and append the node\n    elem = doc.createElement(nodeName);\n    doc.body.appendChild(elem);\n\n    // Get display\n    display = _getComputedStyle(elem, 'display');\n\n    // Remove it from the dom\n    elem.parentNode.removeChild(elem);\n\n    return display;\n  }\n\n  Kimbo.fn.extend({\n    /*\\\n     * $(…).show\n     [ method ]\n     * Display all matched elements.\n     = (object) Original matched collection.\n     > Usage\n     | <p style=\"display: none;\">Lorem</p>\n     * Show it\n     | $('p').show();\n     * Now it's visible\n     | <p style=\"display: block;\">Lorem</p>\n    \\*/\n    show: function () {\n      return this.each(function (el) {\n        var nodeName = el.nodeName;\n        var display = elementsDisplay[nodeName];\n        var doc;\n\n        if (!display) {\n          display = _getActualDisplay(nodeName);\n\n          // If still fails for some css rule try creating the element in an isolated iframe\n          if (display === 'none' || !display) {\n\n            // Use the already-created iframe if possible\n            iframe = (iframe || _createIframe());\n\n            doc = (iframe.contentWindow || iframe.contentDocument).document;\n            doc.write('<!doctype html><html><body>');\n            doc.close();\n            display = _getActualDisplay(nodeName, doc);\n            iframe.parentNode.removeChild(iframe);\n          }\n\n          // Save the default display for this element\n          elementsDisplay[nodeName] = display;\n        }\n\n        el.style.display = display || 'block';\n      });\n    },\n\n    /*\\\n     * $(…).hide\n     [ method ]\n     * Hide all matched elements.\n     = (object) Original matched collection.\n     > Usage\n     | <p>Lorem</p>\n     * Hide it\n     | $('p').hide();\n     * Now it's hidden\n     | <p style=\"display: none;\">Lorem</p>\n    \\*/\n    hide: function () {\n      return this.each(function (el) {\n        var nodeName = el.nodeName;\n        var display = elementsDisplay[nodeName];\n\n        if (!display) {\n          display = _getComputedStyle(el, 'display');\n          elementsDisplay[nodeName] = display;\n        } else {\n          display = el.style.display;\n        }\n\n        // Only hide if not already hidden\n        if (display !== 'none') {\n          el.style.display = 'none';\n        }\n      });\n    },\n\n    /*\\\n     * $(…).css\n     [ method ]\n     * Get the css value of a property from one element or set a css property to all matched elements.\n     > Parameters\n     - property (string|object) Name of the css property.\n     - value (string|number) #optional Value for the property.\n     = (object) Original matched collection.\n     > Usage\n     | <p>Hello dude!</p>\n     * Modify some styles\n     | $('p').css('color', 'red'); // Now the text is red\n     * The HTML will look like this:\n     | <p style=\"color: red;\">Hello dude!</p>\n     * You can also pass an object for setting multiple properties at the same time\n     | $('p').css({\n     |   color: 'red',\n     |   'font-size': '30px',\n     |   backgroundColor: 'blue'\n     | });\n     * Properties can be dash-separated (add quotes) or camelCase.\n     | <p style=\"color: red; font-size: 30px; background-color: blue\">Hello dude!</p>\n    \\*/\n    css: function (property, value) {\n      var that = this;\n\n      if (!this.length || (!Kimbo.isString(property) && !Kimbo.isObject(property))) {\n        return this;\n      }\n\n      function _applyCss(name, value) {\n\n        // If it's a number add 'px' except for some properties\n        if (Kimbo.isNumeric(value) && !CSS_NO_PX[Kimbo.camelCase(name)]) {\n          value += 'px';\n        }\n\n        // Apply styles to all elements in the set\n        that.each(function (el) {\n          el.style[name] = value;\n        });\n      }\n\n      // Setting one property\n      if (Kimbo.isString(property)) {\n\n        // Get\n        if (value === undefined) {\n          return _getComputedStyle(this[0], property);\n\n        // Set\n        } else {\n          _applyCss(property, value);\n        }\n\n      // Multiple properties with an object\n      } else if (Kimbo.isObject(property)) {\n        Kimbo.forEach(property, _applyCss);\n      }\n\n      return this;\n    }\n  });\n});\n\nKimbo.define('manipulation', function (_) {\n\n  'use strict';\n\n  var SPACE_RE = /\\s+/;\n\n  var BOOLEAN_ATTR = {};\n\n  Kimbo.forEach(['multiple', 'selected', 'checked', 'async', 'autofocus', 'autoplay',\n    'controls', 'defer', 'disabled', 'hidden', 'readOnly', 'required', 'open', 'required'\n  ], function (value) {\n    BOOLEAN_ATTR[value.toLowerCase()] = value;\n  });\n\n  // Browser native classList\n  function _hasClass(el, name) {\n    return (el.nodeType === 1 && el.classList.contains(name));\n  }\n\n  /*\\\n   * $(…).text\n   [ method ]\n   * Get the text of the first element in the set or set the text of all the matched elements.\n   > Parameters\n   - value (string) #optional A string of text to set as the text content of all matched elements.\n   = (string) string value of the text content of the element if no parameter passed.\n   = (object) current Kimbo object.\n   > Usage\n   * Get the text content of an element\n   | <p>Demo text</p>\n   * without passing any parameter to the function:\n   | $('p').text(); // 'Demo text'\n   * To replace the text of the paragraph pass a string parameter to the function:\n   | $('p').text('Another text');\n   * Now the text content was replaced:\n   | <p>Another text</p>\n  \\*/\n\n  /*\\\n   * $(…).html\n   [ method ]\n   * Get the HTML content of the first element in the set or set the HTML content of all the matched elements.\n   > Parameters\n   - value (string) #optional A string of HTML to set as the HTML content of all matched elements.\n   = (string) a string value of the HTML content of the element if no parameter passed.\n   = (object) current Kimbo object.\n   > Usage\n   * Get the HTML content of an element\n   | <p><span>Demo text<span></p>\n   * without passing any parameter to the function:\n   | $('p').html(); // '<span>Demo tetxt</span>'\n   * To replace the HTML content of the paragraph pass a string parameter to the function:\n   | $('p').html('<strong>Another content</strong>');\n   * Now the text content was replaced:\n   | <p><strong>Another content</strong></p>\n  \\*/\n\n  /*\\\n   * $(…).val\n   [ method ]\n   * Get the current value of the first element in the set or set the value of all the matched elements.\n   > Parameters\n   - value (string) #optional A string of text to set as the value of all matched elements.\n   = (string) the current value of the first element if no parameter passed\n   = (object) current Kimbo object\n   > Usage\n   * Get the value of a form element:\n   | <input type=\"text\" name=\"color\" value=\"red\" />\n   * without passing any parameter to the function:\n   | $('input').val(); // 'red'\n   * To change the value of the input pass a string parameter to the function:\n   | $('input').val('blue');\n   * Now the value was changed:\n   | $('input').val(); // 'blue'\n  \\*/\n  Kimbo.forEach({\n    text: 'textContent',\n    html: 'innerHTML',\n    val: 'value'\n  }, function (method, prop) {\n    Kimbo.fn[method] = function (value) {\n      // TODO: If we are using html method make sure to remove events and data from all chilNnodes\n\n      // No element\n      if (!this.length) {\n        return undefined;\n      }\n\n      // Get\n      if (value === undefined) {\n        return this[0][prop];\n\n        // Set\n      } else {\n        return this.each(function (el) {\n          el[prop] = value;\n        });\n      }\n    };\n  });\n\n  /*\\\n   * $(…).addClass\n   [ method ]\n   * Adds a class to all matched elements.\n   > Parameters\n   - name (string) Name of the class to add.\n   = (object) Original matched collection.\n   > Usage\n   | <p>I want to be green</p>\n   | <script>\n   | $('p').addClass('green');\n   | </script>\n   * Now it's green\n   | <p class=\"green\">I want to be green</p>\n   * You can add multiple classes separated by a space\n   | <p>Add classes to me</p>\n   | <script>\n   | $('p').addClass('green big width100');\n   | </script>\n   * All classes added and they won't be repetead if you try to add an existing one\n   | <p class=\"green big width100\">Add classes to me</p>\n  \\*/\n\n  /*\\\n   * $(…).removeClass\n   [ method ]\n   * Removes a class to all matched elements.\n   > Parameters\n   - name (string) Name of the class to remove.\n   = (object) Original matched collection.\n   > Usage\n   | <p class=\"big green title float-rigth\">Lorem ipsum</p>\n   * Remove a specific class from the paragraph:\n   | $('p').removeClass('green');\n   * The specified class was removed:\n   | <p class=\"big title float-right\">Lorem ipsum</p>\n   * You can remove multiple classes separating them by a space when calling the function:\n   | $('p').removeClass('big title');\n   * Now only one class left:\n   | <p class=\"float-right\">Lorem ipsum</p>\n   * You can remove all classes just calling .removeClass() without parameters\n   | $('p').removeClass();\n   * All classes were removed including the class attribute:\n   | <p>Lorem ipsum</p>\n  \\*/\n\n  // Generate addClass and removeClass methods\n  // Use native classList\n  // Mdn: https://developer.mozilla.org/en-US/docs/DOM/element.classList\n  // Spec: http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#dom-classlist\n  Kimbo.forEach(['add', 'remove'], function (method) {\n    var isRemove = method === 'remove';\n\n    Kimbo.fn[method + 'Class'] = function (name) {\n      var classNames;\n\n      if (name && Kimbo.isString(name)) {\n        classNames = name.split(SPACE_RE);\n        this.each(function (el) {\n\n          // Skip comments, text, etc\n          if (el.nodeType === 1) {\n\n            // Iterate through all class names passed\n            Kimbo.forEach(classNames, function (className) {\n              el.classList[method](className);\n            });\n          }\n        });\n\n        // Remove all element classes if no classname specified\n      } else if (!name && isRemove) {\n        this.removeAttr('class');\n      }\n\n      return this;\n    };\n  });\n\n  /*\\\n   * $(…).append\n   [ method ]\n   * Insert content to the end of all elements matched by Kimbo.\n   > Parameters\n   - value (string|object) HTML string, DOM element, or Kimbo object to insert.\n   = (object) Original matched collection.\n   > Usage\n   | <div class=\"container\">\n   |   <p class=\"lorem\">Lorem </p>\n   |   <p class=\"lorem\">Lorem </p>\n   | </div>\n   * Insert content\n   | $('.lorem').append('<em>ipsum</em>')\n   * Each element gets the content\n   | <div class=\"container\">\n   |   <p class=\"lorem\">Lorem <em>ipsum</em></p>\n   |   <p class=\"lorem\">Lorem <em>ipsum</em></p>\n   | </div>\n   * You can also get an element and insert it elsewhere\n   | $('.container').append($('.ipsum'))\n   * The selected element will be moved, not cloned.\n   | <div class=\"container\">\n   |   <p class=\"lorem\">Lorem</p>\n   |   <p class=\"lorem\">Lorem</p>\n   |   <p class=\"ipsum\">Ipsum</p>\n   | </div>\n  \\*/\n\n  /*\\\n   * $(…).prepend\n   [ method ]\n   * Insert content to the beginning of all elements matched by Kimbo.\n   > Parameters\n   - value (string|object) HTML string, DOM element, or Kimbo object to insert.\n   = (object) Original matched collection.\n   > Usage\n   | <div class=\"container\">\n   |   <p class=\"lorem\"> Lorem</p>\n   |   <p class=\"lorem\"> Lorem</p>\n   | </div>\n   * Insert content\n   | $('.lorem').prepend('<em>ipsum</em>')\n   * Each element gets the content\n   | <div class=\"container\">\n   |   <p class=\"lorem\"><em>ipsum</em> Lorem</p>\n   |   <p class=\"lorem\"><em>ipsum</em> Lorem</p>\n   | </div>\n   * You can also get an element and insert it elsewhere\n   | $('.container').prepend($('.ipsum'))\n   * The selected element will be moved, not cloned.\n   | <div class=\"container\">\n   |   <p class=\"ipsum\">Ipsum</p>\n   |   <p class=\"lorem\">Lorem</p>\n   |   <p class=\"lorem\">Lorem</p>\n   | </div>\n  \\*/\n\n  // Generate append and prepend methods\n  Kimbo.forEach(['append', 'prepend'], function (method) {\n    var isPrepend = method === 'prepend';\n\n    Kimbo.fn[method] = function (value) {\n      var div;\n\n      // Exit if no set or value passed\n      if (!this.length || !value) {\n        return this;\n      }\n\n      // Handle html string\n      if (Kimbo.isString(value)) {\n\n        // Placeholder element\n        div = document.createElement('div');\n        div.innerHTML = value.trim();\n        value = div.firstChild;\n      }\n\n      // Already a dom node or kimbo collection, just insert it\n      if (value.nodeType || (value instanceof Kimbo)) {\n        return this.each(function (el) {\n\n          // Be sure we can append/prepend to the element\n          if (el.nodeType === 1 || el.nodeType === 11) {\n            _.kimbo(value).each(function (child) {\n              el.insertBefore(child, isPrepend ? el.firstChild : null);\n            });\n          }\n        });\n      }\n    };\n  });\n\n  Kimbo.fn.extend({\n    /*\\\n     * $(…).empty\n     [ method ]\n     * Remove all child nodes from the DOM of the elements in the collection.\n     = (object) Original matched collection.\n     > Usage\n     | <div class=\"container\">\n     |   <p class=\"lorem\">Lorem</p>\n     |   <p class=\"lorem\">Lorem</p>\n     | </div>\n     * Empty .container\n     | $('.container').empty();\n     * All elements inside \".container\" are removed from the DOM\n     | <div class=\"container\"></div>\n    \\*/\n    empty: function () {\n      return this.each(function (el) {\n        while (el.hasChildNodes()) {\n          el.removeChild(el.childNodes[0]);\n        }\n      });\n    },\n\n    /*\\\n     * $(…).remove\n     [ method ]\n     * Remove all matched elements from the DOM.\n     * Similar to @$(…).empty but .remove() removes the element itself\n     = (object) Original matched collection.\n     > Usage\n     | <div class=\"container\">\n     |   <p class=\"lorem\">Lorem</p>\n     |   <p>Lorem</p>\n     | </div>\n     * Remove one element\n     | $('.lorem').remove();\n     * The result element is:\n     | <div class=\"container\">\n     |   <p>Lorem</p>\n     | </div>\n    \\*/\n    remove: function () {\n      return this.each(function (el) {\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        }\n      });\n    },\n\n    // Todo: extend to accept objects and functions to set values\n    /*\\\n     * $(…).attr\n     [ method ]\n     * Get an attribute value from one element or set attributes to all matched elements.\n     > Parameters\n     - name (string) Name of the attribute.\n     - value (string) #optional Value for the attribute.\n     = (string) Attribute value, only if name was passed.\n     = (object) Original matched collection when setting a value.\n     > Usage\n     | <a href=\"http://kimbojs.com\">Go to Kimbojs.com</a>\n     * Get href attribute\n     | $('a').attr('href'); // Http://kimbojs.com\n     * Set a new attribute\n     | $('a').attr('title', 'Go to Kimbojs.com');\n     * Now element has a title attribute\n     | <a href=\"http://kimbojs.com\" title=\"Go to Kimbojs.com\">Go to Kimbojs.com</a>\n    \\*/\n    attr: function (name, value) {\n      var lowercasedName = name.toLowerCase();\n      var el = this[0];\n\n      if (!this.length) {\n        return this;\n      }\n\n      if (Kimbo.isString(name) && value === undefined) {\n        if (BOOLEAN_ATTR[lowercasedName]) {\n          return (el[name] || (el.attributes.getNamedItem(name)|| {}).specified) ? lowercasedName : undefined;\n        }\n        return el.getAttribute(name);\n      } else {\n        return this.each(function (el) {\n          if (BOOLEAN_ATTR[lowercasedName]) {\n            if (!!value) {\n              el[name] = true;\n              el.setAttribute(name, lowercasedName);\n            } else {\n              el[name] = false;\n              el.removeAttribute(name);\n            }\n          } else {\n            el.setAttribute(name, value);\n          }\n        });\n      }\n    },\n\n    /*\\\n     * $(…).removeAttr\n     [ method ]\n     * Removes an attribute from all matched elements.\n     > Parameters\n     - name (string) Name of the attribute to remove.\n     = (object) Original matched collection.\n     > Usage\n     | <a href=\"http://kimbojs.com\" title=\"Go to Kimbojs.com\">Go to Kimbojs.com</a>\n     * Remove the title attribute\n     | $('a').removeAttr('title');\n     * Now the element has no title\n     | <a href=\"http://kimbojs.com\">Go to Kimbojs.com</a>\n    \\*/\n    removeAttr: function (name) {\n      return this.each(function (el) {\n        el.removeAttribute(name);\n      });\n    },\n\n    /*\\\n     * $(…).toggleClass\n     [ method ]\n     * Removes a class to all matched elements.\n     > Parameters\n     - name (string) Name of the class to toggle.\n     - state (boolean) #optional If state is true the class will be added, if false, removed.\n     = (object) Original matched collection.\n     > Usage\n     | <p class=\"foo\">Lorem ipsum.</p>\n     | <script>\n     | $('p').toggleClass('foo');\n     | </script>\n     * The `p` element has the class foo soo it will be removed\n     | <p>Lorem ipsum.</p>\n    \\*/\n    toggleClass: function (name, state) {\n      var classNames;\n\n      if (this.length && name && Kimbo.isString(name)) {\n\n        classNames = name.split(SPACE_RE);\n\n        this.each(function (el) {\n          Kimbo.forEach(classNames, function (name) {\n\n            // Use custom toggle (anyway it uses classList.add/remove)\n            state = Kimbo.isBoolean(state) ? state : !_hasClass(el, name);\n            _.kimbo(el)[state ? 'addClass' : 'removeClass'](name);\n          });\n        });\n      }\n\n      return this;\n    },\n\n    /*\\\n     * $(…).hasClass\n     [ method ]\n     * Determine whether any matched elements has the given class.\n     > Parameters\n     - name (string) Name of the class to search for.\n     = (object) Original matched collection.\n     > Usage\n     | <p class=\"asd foo qwe\">Lorem ipsum.</p>\n     * Check if the element has the class 'foo'\n     | $('p').hasClass('foo'); // True\n     * You could also check if it has multiple classes\n     | $('p').hasClass('qwe asd'); // True\n    \\*/\n    hasClass: function (name) {\n      var has = false;\n      var classNames;\n\n      if (this.length && name && Kimbo.isString(name)) {\n\n        classNames = name.trim().split(SPACE_RE);\n\n        this.each(function (el) {\n\n          // Classlist.contains only accepts one class parameter\n          Kimbo.forEach(classNames, function (name) {\n            has = _hasClass(el, name);\n\n            // When only one is missing break the loop\n            if (!has) {\n              return false;\n            }\n          });\n        });\n      }\n\n      return has;\n    },\n\n    /*\\\n     * $(…).clone\n     [ method ]\n     * Clones a DOM node.\n     > Parameters\n     = (object) Original matched collection.\n     > Usage\n     | <p class=\"asd foo qwe\">Lorem ipsum.</p>\n     | var p1 = $('p'); // Grab the p element\n     | var p2 = p1.clone(); // Clone p1 into p2\n     | console.log(p2 === p1); // False\n    \\*/\n    clone: function () {\n      return this.each(function (el) {\n        return el.cloneNode(true);\n      });\n    }\n  });\n});\n\nKimbo.define('traversing', function (_) {\n\n  'use strict';\n\n  var query = Kimbo.require('query');\n\n  var _filter = Array.prototype.filter;\n\n  // Functions that should return a unique set\n  var IS_UNIQUE = {\n    children: true,\n    contents: true,\n    next: true,\n    prev: true\n  };\n\n  // Use native matchesSelector\n  var _matchesSelector = document.documentElement.matchesSelector ||\n    document.documentElement.webkitMatchesSelector ||\n    document.documentElement.mozMatchesSelector ||\n    document.documentElement.oMatchesSelector;\n\n  function _matches(elem, selector) {\n    return (!elem || elem.nodeType !== 1) ? false : _matchesSelector.call(elem, selector);\n  }\n\n  // Remove duplicates from an array\n  function _unique(array) {\n    return array.filter(function (item, index) {\n      return array.indexOf(item) === index;\n    });\n  }\n\n  function _sibling(node, elem) {\n    var result = [];\n    for (; node; node = node.nextSibling) {\n      if (node.nodeType === 1 && node !== elem ) {\n        result.push(node);\n      }\n    }\n    return result;\n  }\n\n  function _singleSibling(node, prop) {\n    do {\n      node = node[prop];\n    } while (node && node.nodeType !== 1);\n\n    return node;\n  }\n\n  Kimbo.fn.extend({\n    /*\\\n     * $(…).filter\n     [ method ]\n     * Filter element collection by the passed argument.\n     > Parameters\n     - selector (string|object|function) The argument by which the collection will be filtered.\n     = (object) Filtered elements collection.\n     > Usage\n     | <ul>\n     |   <li>One</li>\n     |   <li>Two</li>\n     |   <li>Three</li>\n     |   <li>Four</li>\n     | </ul>\n     * Get even items.\n     | $('li').filter(':nth-child(even)').addClass('even');\n     * Only even items were affected.\n     | <ul>\n     |   <li>One</li>\n     |   <li class=\"even\">Two</li>\n     |   <li>Three</li>\n     |   <li class=\"even\">Four</li>\n     | </ul>\n     > Using a function(index, element)\n     * You can also filter the collection using a function, receiving the current index and element in the collection.\n     | $('li').filter(function (index, element) {\n     |   return index % 3 == 2;\n     | }).addClass('red');\n     * This will add a 'red' class to the third, sixth, ninth elements and so on...\n     > Filter by DOM or Kimbo object\n     * You can also filter by a DOM or Kimbo object.\n     | $('li').filter(document.getElementById('id'));\n     | // Or a Kimbo object\n     | $('li').filter($('#id'));\n    \\*/\n    filter: function (selector) {\n\n      // Filter collection\n      var result = _filter.call(this, function (elem, i) {\n        var ret;\n\n        if (Kimbo.isFunction(selector)) {\n          ret = !!selector.call(elem, elem, i);\n        } else if (Kimbo.isString(selector)) {\n          ret = _matches(elem, selector);\n        } else if (selector.nodeType) {\n          ret = elem === selector;\n        } else if (selector instanceof Kimbo) {\n          ret = elem === selector[0];\n        }\n\n        return ret;\n      });\n\n      return _.kimbo(result);\n    },\n\n    /*\\\n     * $(…).eq\n     [ method ]\n     * Reduce the matched elements collection to the one at the specified index.\n     > Parameters\n     - index (number) An integer indicating the position of the element. Use a negative number to go backwards in the collection.\n     = (object) Kimbo object at specified index.\n     > Usage\n     | <ul>\n     |   <li>Item 1</li>\n     |   <li>Item 2</li>\n     |   <li>Item 3</li>\n     |   <li>Item 4</li>\n     | </ul>\n     * Get 3rd element, index always start at 0, so to get the 3rd we need to pass the number 2.\n     | $('li').eq(2); // Item 3\n    \\*/\n    eq: function (i) {\n      return this.length && i === -1 ? this.slice(i) : this.slice(i, i + 1);\n    },\n\n    /*\\\n     * $(…).first\n     [ method ]\n     * Reduce the matched elements collection to the first in the set.\n     = (object) First Kimbo object of the collection\n     > Usage\n     | <ul>\n     |   <li>Item 1</li>\n     |   <li>Item 2</li>\n     |   <li>Item 3</li>\n     | </ul>\n     * Get only the first element\n     | $('li').first(); // Item 1\n    \\*/\n    first: function () {\n      return this.eq(0);\n    },\n\n    /*\\\n     * $(…).last\n     [ method ]\n     * Reduce the matched elements collection to the last in the set.\n     = (object) Last Kimbo object of the collection\n     > Usage\n     | <ul>\n     |   <li>Item 1</li>\n     |   <li>Item 2</li>\n     |   <li>Item 3</li>\n     | </ul>\n     * Get only the last element\n     | $('li').last(); // Item 3\n    \\*/\n    last: function () {\n      return this.eq(-1);\n    },\n\n    /*\\\n     * $(…).slice\n     [ method ]\n     * Reduce the matched elements collection to a subset specified by a range of indices\n     > Parameters\n     - start (number) An integer indicating the position at which the elements begin to be selected. Use a negative number to go backwards in the collection.\n     - end (number) #optional An integer indicating the position at which the elements stop being selected. Use a negative number to start at the end of the collection. If ommited, the range continues to the end.\n     = (object) Reduced Kimbo object collection in the range specified\n     > Usage\n     | <ul>\n     |   <li>Item 1</li>\n     |   <li>Item 2</li>\n     |   <li>Item 3</li>\n     |   <li>Item 4</li>\n     |   <li>Item 5</li>\n     | </ul>\n     * This will add the class selected to Item 3, 4 and 5, as the index starts at 0\n     | $('li').slice(2).addClass('selected');\n     * This will select only Items 3 and 4\n     | $('li').slice(2, 4).addClass('selected');\n     > Negative index\n     * Here only Item 4 will be selected since is the only between -2 (Item 3) and -1 (Item 5)\n     | $('li').slice(-2, -1).addClass('selected');\n    \\*/\n    slice: function () {\n      return this.length && _.kimbo(_.slice.apply(this, arguments));\n    },\n\n    /*\\\n     * $(…).each\n     [ method ]\n     * Iterate over a Kimbo objct, executing a function for each element.\n     > Parameters\n     - callback (function) A function to call for each element in the collection.\n     = (object) Kimbo object\n     > Usage\n     * Here we have an unordered list:\n     | <ul>\n     |   <li>Item 1</li>\n     |   <li>Item 2</li>\n     |   <li>Item 3</li>\n     | </ul>\n     * You can iterate over all the list items and execute a function\n     | $('li').each(function (el, index, collection) {\n     |   console.log('index of ' + $(this).text() + ' is: ' + index);\n     | });\n     * This will log the following message\n     *\n     * index of Item 1 is: 0\n     *\n     * index of Item 2 is: 1\n     *\n     * index of Item 3 is: 2\n    \\*/\n    each: function (callback) {\n      return Kimbo.forEach(this, callback);\n    },\n\n    /*\\\n     * $(…).map\n     [ method ]\n     * Execute a function for each element in the collection, producing a new Kimbo set with the returned values\n     > Parameters\n     - callback (function) A function to call for each element in the collection.\n     = (object) Kimbo object\n     > Usage\n     * Here we have an unordered list:\n     | <ul>\n     |   <li id=\"item1\">Item 1</li>\n     |   <li id=\"item2\">Item 2</li>\n     |   <li id=\"item3\">Item 3</li>\n     | </ul>\n     * You can call a function for each element to create a new Kimbo object\n     | $('li').map(function (el, index) {\n     |   return this.id;\n     | }).get().join();\n     * This will produce a list of the item ids.\n     | \"item1,item2,item3\"\n    \\*/\n    map: function (callback) {\n      return _.kimbo(Kimbo.map(this, function (elem, i) {\n        return callback.call(elem, elem, i);\n      }));\n    },\n\n    /*\\\n     * $(…).find\n     [ method ]\n     * Find descendant elements for each element in the current collection.\n     > Parameters\n     - selector (string) A string selector to match elements.\n     = (object) Kimbo object\n     > Usage\n     * Here we have some HTML\n     | <div id=\"container\">\n     |   <p>Demo</p>\n     |   <div class=\"article\">\n     |     <p>This is an article</p>\n     |     <p>with some paragraphs</p>\n     |   </div>\n     | </div>\n     * You can find all paragraph elements inside the article:\n     | $('.article').find('p');\n    \\*/\n    find: function (selector) {\n\n      // Make new empty kimbo collection\n      var result = _.kimbo();\n      var l = this.length;\n\n      var i, len, n, r, elems;\n\n      // Could use Kimbo.forEach, but this is a bit faster..\n      for (i = 0; i < l; i++) {\n        len = result.length;\n\n        // Get elements\n        elems = query.find(this[i], selector);\n\n        // Push them to current kimbo collection\n        _.push.apply(result, elems);\n\n        if (i) {\n\n          // Make results unique\n          for (n = len; n < result.length; n++) {\n            for (r = 0; r < len; r++) {\n              if (result[r] === result[n]) {\n                result.splice(n--, 1);\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    },\n\n    /*\\\n     * $(…).closest\n     [ method ]\n     * Get a Kimbo collection that matches the closest selector\n     > Parameters\n     - selector (string) A string selector to match elements.\n     - context (string) #optional A DOM element within which matching elements may be found.\n     = (object) Kimbo object\n     > Usage\n     * Here we have a nested unordered lists:\n     | <ul>\n     |   <li>\n     |     Item 1\n     |     <ul class=\"ul-level-2\">\n     |       <li class=\"item-1-1\">Item 1.1</li>\n     |       <li class=\"item-1-2\">Item 1.2</li>\n     |     </ul>\n     |   </li>\n     |   <li>Item 2</li>\n     | </ul>\n     * You can find the containing ul of the items in the nested ul:\n     | $('.item-1-1').closest('ul');\n     * This will return `ul.level-2` element\n    \\*/\n    closest: function (selector, context) {\n      var l = this.length;\n      var result = [];\n\n      if (!l) {\n        return this;\n      }\n\n      function _closest(node) {\n\n        // Check selector match and grab the element\n        while (node && !_matches(node, selector)) {\n          node = node !== context && node !== document && node.parentNode;\n        }\n        return node;\n      }\n\n      // Optimize closest for 1 element\n      if (l === 1) {\n        result = _closest(this[0]);\n\n      // Get closest from all elements in the set\n      } else {\n        Kimbo.forEach(this, function (node) {\n          node = _closest(node);\n          if (node) {\n            result.push(node);\n          }\n        });\n\n        // Only unique results\n        result = result.length > 1 ? _unique(result) : result;\n      }\n\n      return _.kimbo(result);\n    },\n\n    /*\\\n     * $(…).contains\n     [ method ]\n     * Determine whether an element is contained by the current matched element.\n     > Parameters\n     - element (string|object) Selector of the element or the actual DOM or Kimbo object.\n     = (boolean) true if it is contained, false if not.\n     > Usage\n     | <div id=\"container\">\n     |   <p id=\"inside\">Inside paragraph</p>\n     | </div>\n     | <p id=\"outside\">Outside paragraph</p>\n     * The paragraph with id \"inside\" is actually contained by \"#container\"\n     | $('#container').contains('#inside'); // True\n     * The paragraph ourside is not contained\n     | var outside_p = $('#outside');\n     | $('#container').contains(outside_p); // False\n    \\*/\n    contains: function (element) {\n\n      if (Kimbo.isString(element)) {\n        element = this.find(element)[0];\n      } else if (element instanceof Kimbo) {\n        element = element[0];\n      }\n\n      return query.contains(this[0], element);\n    },\n\n    /*\\\n     * $(…).add\n     [ method ]\n     * Add elements to the current Kimbo collection.\n     > Parameters\n     - selector (string|object) Selector of the element or the actual DOM or Kimbo object.\n     - context (string|object) #optional Selector of the context element or the actual DOM or Kimbo object.\n     = (object) The merged Kimbo collection.\n     > Usage\n     | <ul id=\"menu1\">\n     |   <li>Apple</li>\n     |   <li>Orange</li>\n     | </ul>\n     |\n     | <ul id=\"menu2\">\n     |   <li>Lemon</li>\n     |   <li>Banana</li>\n     | </ul>\n     * Get the items from the #menu1 and add the ones from #menu2, all the following ways will produce the same collection\n     | $('#menu1 li').add('#menu2 li');\n     * or\n     | $('#menu1 li').add('li', '#menu2');\n     * or\n     | $('#menu1 li').add($('#menu2 li'));\n    \\*/\n    add: function (selector, context) {\n      var set, all;\n\n      if (selector) {\n        if (Kimbo.isString(selector)) {\n          set = _.kimbo(selector, context);\n        } else if (selector.nodeType) {\n          set = [selector];\n        } else {\n          set = selector;\n        }\n\n        all = Kimbo.merge(this, set);\n\n        return _.kimbo(all);\n      }\n\n      return this;\n    },\n\n    /*\\\n     * $(…).is\n     [ method ]\n     * Check the current elements collection against a selector, object or function.\n     - selector (string|object|function) The argument by which the collection will be matched against.\n     = (boolean)\n     > Usage\n     | <ul>\n     |   <li>Click the <em>Apple</em></li>\n     |   <li><span>Click the Orange</span></li>\n     |   <li>Or the Banana</li>\n     | </ul>\n     * Test if the current clicked element is an `<li>` element.\n     | $('ul').click(function (event) {\n     |   var $target = $(event.target);\n     |   if ($target.is('li')) {\n     |     $target.css('background-color', 'red');\n     |   }\n     | });\n    \\*/\n    is: function (selector) {\n      return !!(this.length && this.filter(selector).length);\n    }\n  });\n\n  Kimbo.forEach({\n    /*\\\n     * $(…).parent\n     [ method ]\n     * Get the parent of each element matched in the current collection.\n     * If a selector is specified, it will return the parent element only if it matches that selector.\n     - selector (string) #optional A string containing a selector expression to match elements against\n     = (object) Kimbo object\n     > Usage\n     * Suppose a page with this HTML:\n     | <ul>\n     |   <li class=\"item-a\">Item 1</li>\n     |   <li class=\"item-b\">Item 2</li>\n     | </ul>\n     * Get the parent element of `.item-a`\n     | $('.item-a').parent(); // Ul\n    \\*/\n    parent: function (elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n\n    /*\\\n     * $(…).next\n     [ method ]\n     * Get the immedeately following sibling of each element in the current collection.\n     * If a selector is specified, it will return the element only if it matches that selector.\n     - selector (string) #optional A string containing a selector expression to match elements against\n     = (object) Kimbo object\n     > Usage\n     * Suppose a page with this HTML:\n     | <ul>\n     |   <li class=\"item-a\">Item 1</li>\n     |   <li class=\"item-b\">Item 2</li>\n     | </ul>\n     * Get the parent element of `.item-a`\n     | $('.item-a').next(); // .item-b\n    \\*/\n    next: function (elem) {\n      return _singleSibling(elem, 'nextSibling');\n    },\n\n    /*\\\n     * $(…).prev\n     [ method ]\n     * Get the immedeately previous sibling of each element in the current collection.\n     * If a selector is specified, it will return the element only if it matches that selector.\n     - selector (string) #optional A string containing a selector expression to match elements against\n     = (object) Kimbo object\n     > Usage\n     * Suppose a page with this HTML:\n     | <ul>\n     |   <li class=\"item-a\">Item 1</li>\n     |   <li class=\"item-b\">Item 2</li>\n     | </ul>\n     * Get the parent element of `.item-a`\n     | $('.item-b').prev(); // .item-a\n    \\*/\n    prev: function (elem) {\n      return _singleSibling(elem, 'previousSibling');\n    },\n\n    /*\\\n     * $(…).sibling\n     [ method ]\n     * Get the immedeately previous sibling of each element in the current collection.\n     * If a selector is specified, it will return the element only if it matches that selector.\n     - selector (string) #optional A string containing a selector expression to match elements against\n     = (object) Kimbo object\n     > Usage\n     * Suppose a page with this HTML:\n     | <ul>\n     |   <li class=\"item-a\">Item 1</li>\n     |   <li class=\"item-b\">Item 2</li>\n     | </ul>\n     * Get the parent element of `.item-a`\n     | $('.item-b').prev(); // .item-a\n    \\*/\n    siblings: function (elem) {\n      return _sibling((elem.parentNode || {}).firstChild, elem);\n    },\n\n    /*\\\n     * $(…).children\n     [ method ]\n     * Get the children of all matched elements, optionally filtered by a selector.\n     - selector (string) #optional A string selector to match elements against.\n     = (object) Kimbo object\n     > Usage\n     * Suppose a page with the following HTML:\n     | <div class=\"demo\">\n     |   <p>This</p>\n     |   <p>is</p>\n     |   <p>a</p>\n     |   <p>demo.</p>\n     | </div>\n     * Get all children of `.demo`:\n     | $('.demo').children(); // Al <p> tags inside .demo div\n     * Another example passing an specific selector:\n     | <form>\n     |   <input type=\"text\" name=\"name\" />\n     |   <input type=\"text\" name=\"last\" />\n     |   <input type=\"submit\" value=\"Send\" />\n     | </form>\n     * Get only the children that are text type elements:\n     | $('form').children('input[type=\"text\"]'); // Only name and last inputs\n    \\*/\n    children: function (elem) {\n      return _sibling(elem.firstChild);\n    },\n\n    /*\\\n     * $(…).contents\n     [ method ]\n     * Get the HTML content of an iframe\n     = (object) Kimbo object\n     > Usage\n     * Suppose an iframe loading an external page:\n     | <iframe src=\"http://api.kimbojs.com\"></iframe>\n     * Find the body element of the contents of that iframe:\n     | $('iframe').contents().find('body');\n    \\*/\n    contents: function (elem) {\n      return elem.nodeName.toLowerCase() === 'iframe' ? elem.contentDocument || elem.contentWindow[document] : Kimbo.makeArray(elem.childNodes);\n    }\n  }, function (name, fn) {\n    Kimbo.fn[name] = function (selector) {\n      var l = this.length;\n      var ret;\n\n      if (!l) {\n        return this;\n      }\n\n      ret = Kimbo.map(this, fn);\n\n      // Clean collection\n      ret = l > 1 && !IS_UNIQUE[name] ? _unique(ret) : ret;\n\n      if (Kimbo.isString(selector)) {\n        ret = _.kimbo(ret).filter(selector);\n      }\n\n      return _.kimbo(ret);\n    };\n  });\n});\n\nKimbo.define('utilities', function (_) {\n\n  'use strict';\n\n  // Mobile userAgent escaped regexes\n  var ANDROID_RE = '(Android)\\\\s+([\\\\d.]+)';\n  var BLACKBERRY_RE = '(BlackBerry|BB10|Playbook).*Version\\/([\\\\d.]+)';\n  var FIREFOXOS_RE = '(Mozilla).*Mobile[^\\/]*\\/([\\\\d.]*)';\n  var IPAD_RE = '(iPad).*OS\\\\s([\\\\d_]+)';\n  var IPHONE_RE = '(iPhone\\\\sOS)\\\\s([\\\\d_]+)';\n  var WEBOS = '(web|hpw)OS[\\\\s\\/]([\\\\d.]+)';\n\n  // Full regexp to test the userAgent\n  var MOBILE_OS_RE = new RegExp(\n    ANDROID_RE + '|' +\n    BLACKBERRY_RE + '|' +\n    FIREFOXOS_RE + '|' +\n    IPHONE_RE + '|' +\n    IPAD_RE + '|' +\n    WEBOS\n  );\n\n  var isMobile = null;\n\n  var objectTypes = {};\n  var toString = Object.prototype.toString;\n\n  // Map object types\n  Kimbo.forEach(['Array', 'Boolean', 'Date', 'Error', 'Function',\n    'Number', 'Object', 'RegExp', 'String'\n  ], function (type) {\n    objectTypes['[object ' + type + ']'] = type.toLowerCase();\n  });\n\n  Kimbo.extend({\n    /*\\\n     * $.typeOf\n     [ method ]\n     * Determine the internal JavaScript [[Class]] of an object.\n     > Parameters\n     - obj (object) Object to get its [[Class]] type.\n     = (string) Type of the object.\n     > Usage\n     | $.typeOf('i am a string'); // 'string'\n     | $.typeOf(/(\\.regexp?)/); // 'regexp'\n     | $.typeOf(null); // 'null'\n     | $.typeOf(undefined); // 'undefined'\n     | $.typeOf(window.notDefined); // 'undefined'\n     | $.typeOf(function () {}); // 'function'\n     | $.typeOf({key: 'value'}); // 'object'\n     | $.typeOf(true); // 'boolean'\n     | $.typeOf([]); // 'array'\n     | $.typeOf(new Date()); // 'date'\n     | $.typeOf(3); // 'number'\n    \\*/\n    typeOf: function (obj) {\n      var type;\n\n      if (obj === null || obj === undefined) {\n        type = String(obj);\n\n      } else {\n        type = objectTypes[toString.call(obj)];\n      }\n\n      return type || 'object';\n    },\n\n    /*\\\n     * $.isArray\n     [ method ]\n     * Determine if the parameter passed is an array object.\n     > Parameters\n     - obj (object) Object to test if its an array.\n     = (boolean) According wether or not it is an array object.\n     > Usage\n     | $.isArray([]); // True\n     | $.isArray({}); // False\n     | $.isArray('test'); // False\n    \\*/\n    isArray: Array.isArray,\n\n    /*\\\n     * $.isNumeric\n     [ method ]\n     * Determine if the parameter passed is an number.\n     > Parameters\n     - obj (object) Object to test if its a number.\n     = (boolean) According wether or not it is a number.\n     > Usage\n     | $.isNumeric(3); // True\n     | $.isNumeric('3'); // False\n    \\*/\n    isNumeric: function (obj) {\n      return !isNaN(parseFloat(obj)) && isFinite(obj);\n    },\n\n    /*\\\n     * $.isWindow\n     [ method ]\n     * Determine if the parameter passed is the window object.\n     > Parameters\n     - obj (object) Object to test if its the window object.\n     = (boolean) According wether or not it is the window object.\n     > Usage\n     | $.isWindow(window); // True\n     | $.isWindow({ window: window }); // False\n    \\*/\n    isWindow: function (obj) {\n      return obj && obj === obj.window;\n    },\n\n    /*\\\n     * $.isEmptyObject\n     [ method ]\n     * Determine if the parameter passed is an empty object.\n     > Parameters\n     - obj (object) Object to test if its an empty object.\n     = (boolean) According wether or not it is an empty object.\n     > Usage\n     | $.isEmptyObject({}); // True\n     | $.isEmptyObject([]); // True\n     | $.isEmptyObject([1, 2]); // False\n    \\*/\n    isEmptyObject: function (obj) {\n      var key;\n\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /*\\\n     * $.isMobile\n     [ method ]\n     * Determine if the current platform is a mobile device, (otherwise is a desktop browser).\n     > Parameters\n     = (boolean) According wether or not is a mobile device.\n     > Usage\n     | $.isMobile(); // False\n    \\*/\n    isMobile: function () {\n\n      // Check only once for the current browser\n      if (isMobile === null) {\n        isMobile = MOBILE_OS_RE.test(navigator.userAgent);\n      }\n\n      return isMobile;\n    },\n\n    /*\\\n     * $.parseJSON\n     [ method ]\n     * Parses a well-formed JSON string and returns the resulting JavaScript object.\n     > Parameters\n     - data (string) The JSON string to parse.\n     = (object) A JavaScript object.\n     > Usage\n     | var obj = $.parseJSON('{\"name\":\"Denis\"}');\n     | console.log(obj.name === 'Denis'); // True\n    \\*/\n    parseJSON: function (data) {\n\n      // Use native JSON parser\n      if (data && Kimbo.isString(data)) {\n        return window.JSON.parse(data);\n      }\n    },\n\n    /*\\\n     * $.parseXML\n     [ method ]\n     * Parses a string into an XML document.\n     > Parameters\n     - data (string) The JSON string to parse.\n     = (object) A JavaScript object.\n     > Usage\n     | var xml = \"<rss version='2.0'><channel><title>RSS Title</title></channel></rss>\"\n     | var xmlDoc = $.parseXML(xml);\n     | $(xmlDoc).find('title'); // 'RSS Title'\n    \\*/\n    parseXML: function (data) {\n\n      // Use native XML (DOM) parser\n      var domparser;\n      var xml;\n\n      if (data && Kimbo.isString(data)) {\n        domparser = new window.DOMParser();\n        xml = domparser.parseFromString(data, 'text/xml');\n\n        if (xml.getElementsByTagName('parsererror').length) {\n          throw new Error('Invalid XML: ' + data);\n        }\n\n        return xml;\n      }\n    },\n\n    /*\\\n     * $.map\n     [ method ]\n     * Translate all items in an array or object to new array of items.\n     > Parameters\n     - obj (array|object) The Array or Object to translate.\n     = (array) A new array.\n     > Usage\n     | var arr = ['a', 'b', 'c'];\n     | arr = $.map(arr, function (element, index) {\n     |   return element.toUpperCase() + index;\n     | });\n     | console.log(arr); // ['A0', 'B1', 'C2']\n     * Or wit an object\n     | var obj = {a: 'a', b: 'b', c: 'c'};\n     | obj = $.map(arr, function (key, value) {\n     |   return key + ': ' + value.toUpperCase();\n     | });\n     | console.log(obj); // ['a: A', 'b: B', 'c: C']\n    \\*/\n    map: function (obj, callback) {\n      var values = [];\n\n      if (obj) {\n        Kimbo.forEach(obj, function (key, val) {\n          var value = callback(key, val);\n\n          if (value !== null && value !== undefined) {\n            values.push(value);\n          }\n        });\n      }\n\n      // Flatten any nested arrays\n      return values.concat.apply([], values);\n    },\n\n    /*\\\n     * $.makeArray\n     [ method ]\n     * Create an Array from the given object\n     > Parameters\n     - obj (array|object) The Array or Object to make an array from.\n     = (array) A new array.\n     > Usage\n     | var lis = $('li'); // Kimbo object\n     | var arr = $.makeArray(lis);\n     |\n     | console.log($.isArray(lis)); // False\n     | console.log($.isArray(arr)); // True\n    \\*/\n    makeArray: function (obj, results) {\n      results = results || [];\n\n      if (obj) {\n        if (Kimbo.isArray(obj) || (obj instanceof Kimbo) || obj instanceof window.NodeList) {\n          results = Kimbo.merge(results, obj);\n        } else {\n          _.push.call(results, obj);\n        }\n      }\n\n      return results;\n    },\n\n    /*\\\n     * $.merge\n     [ method ]\n     * Merge the contents of two arrays into the first array passed.\n     > Parameters\n     - first (array) The first array to merge the contents of the second.\n     - second (array|string) The second array to merge into the first.\n     = (array) The first array merged with the second.\n     > Usage\n     | $.merge(['a', 'b'], ['c', 'd']);\n     * Result:\n     | ['a', 'b', 'c', 'd']\n    \\*/\n    merge: function (first, second) {\n\n      // Concat is very fast, use it if we can\n      if (Kimbo.isArray(first)) {\n        first = first.concat(second);\n\n      // Kimbo object, do a consecutive push\n      } else {\n        _.push.apply(first, _.slice.call(second));\n      }\n\n      return first;\n    },\n\n    /*\\\n     * $.camelCase\n     [ method ]\n     * Camelize any dashed separated string\n     > Parameters\n     - str (string) A dashed separated string value to transform into camelCase.\n     = (string) camelCase string\n     > Usage\n     | $.camelCase('background-color');\n     * Result:\n     | 'backgroundColor'\n    \\*/\n    camelCase: function (str) {\n      return str.replace(/-+(.)?/g, function (all, character) {\n        return character.toUpperCase();\n      });\n    },\n\n    /*\\\n     * $.isFunction\n     [ method ]\n     * Determine if the parameter passed is a Javascript function object.\n     > Parameters\n     - obj (object) Object to test if its a function.\n     = (boolean) According wether or not it is a function.\n     > Usage\n     | var myFunction = function () {};\n     | $.isFunction(myFunction); // True\n     | var something = ['lala', 'jojo'];\n     | $.isFunction(something); // False\n    \\*/\n    isFunction: function (obj) {\n      return Kimbo.typeOf(obj) === 'function';\n    },\n\n    /*\\\n     * $.isObject\n     [ method ]\n     * Determine if the parameter passed is a Javascript plain object.\n     > Parameters\n     - obj (object) Object to test if its a plain object.\n     = (boolean) According wether or not it is a plain object.\n     > Usage\n     | $.isObject({}); // True\n     | $.isObject([]); // False\n     | $.isObject('test'); // False\n    \\*/\n    isObject: function (obj) {\n      return Kimbo.typeOf(obj) === 'object';\n    },\n\n    /*\\\n     * $.isString\n     [ method ]\n     * Determine if the parameter passed is a string.\n     > Parameters\n     - obj (object) Object to test if its a string.\n     = (boolean) According wether or not it is a string.\n     > Usage\n     | $.isString('test'); // True\n     | $.isString({ name: 'asd' }); // False\n    \\*/\n    isString: function (obj) {\n      return Kimbo.typeOf(obj) === 'string';\n    },\n\n    /*\\\n     * $.isBoolean\n     [ method ]\n     * Determine if the parameter passed is boolean.\n     > Parameters\n     - obj (object) Object to test if its boolean..\n     = (boolean) According wether or not it is boolean.\n     > Usage\n     | $.isBoolean(false); // True\n     | $.isBoolean(3); // False\n    \\*/\n    isBoolean: function (obj) {\n      return Kimbo.typeOf(obj) === 'boolean';\n    }\n  });\n\n  // Save reference to Kimbo wrapped document as the default context\n  _.rootContext = _.kimbo(_.rootContext);\n});\n\nKimbo.define('events', function (_) {\n\n  'use strict';\n\n  var query = Kimbo.require('query');\n  var _guid = 1;\n  var MOUSE_EVENT_RE = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;\n  var KEY_EVENT_RE = /^key/;\n  var DEFAULT_EVENT_PROPS = [\n    'altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase',\n    'metaKey', 'relatedTarget', 'shiftKey', 'target', 'timeStamp', 'view', 'which'\n  ];\n  var MOUSE_EVENT_PROPS = [\n    'button', 'buttons', 'clientX', 'clientY', 'fromElement',\n    'offsetX', 'offsetY', 'screenX', 'screenY', 'toElement'\n  ];\n  var KEY_EVENT_PROPS = ['char', 'charCode', 'key', 'keyCode'];\n\n  // Gestures fallback for not mobile environment\n  var GESTURES_FALLBACK = Kimbo.isMobile() ? {} : {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    touch: 'click',\n    doubletap: 'dblclick',\n    orientationchange: 'resize'\n  };\n\n  var handlersHash = {};\n  var fixEventProps = {};\n  var specialEvents = {};\n\n  function _fixEvent(event) {\n    var originalEvent, eventProps, props;\n\n    // Already fixed\n    if (event[Kimbo.ref]) {\n      return event;\n    }\n\n    // Get event properties\n    originalEvent = event;\n    eventProps = fixEventProps[event.type] || [];\n    props = DEFAULT_EVENT_PROPS.concat(eventProps);\n\n    // Create a new event writable custom event object\n    event = new Kimbo.Event(originalEvent);\n\n    // Set event props to Kimbo.Event object\n    Kimbo.forEach(props, function (prop) {\n      event[prop] = originalEvent[prop];\n    });\n\n    return event;\n  }\n\n  // Return element id\n  function _getElementId(element) {\n    return element._guid || (element._guid = _guid++);\n  }\n\n  // Get element handlers for the specified type\n  function _getHandlers(elementId, type) {\n    var events = ((handlersHash[elementId] || {}).events || {});\n\n    return (type ? events[type] : events) || [];\n  }\n\n  // Register events to dom elements\n  function _addEvent(element, type, callback, data, selector) {\n    var elementId, elementHandlers, origType;\n    var events, handlers, handleObj, handler;\n\n    // Don't add listener if element is a text or comment node\n    // or type is not a string\n    if ((element && (element.nodeType === 3 || element.nodeType === 8)) || !Kimbo.isString(type)) {\n      return;\n    }\n\n    // TODO: element should use Kimbo.ref and the handler the _guid\n    elementId = _getElementId(element);\n    elementHandlers = handlersHash[elementId];\n\n\n    // Could be a special type like mouseenter/mouseleave\n    origType = type;\n    type = specialEvents[type] ? specialEvents[type].origType : type;\n\n    // Create hash for this element if first init\n    if (!elementHandlers) {\n      handlersHash[elementId] = elementHandlers = {};\n    }\n\n    // Create events object if first init\n    events = elementHandlers.events;\n    if (!events) {\n      elementHandlers.events = events = {};\n    }\n\n    // Create the handler for this element if first init\n    handler = elementHandlers.handler;\n    if (!handler) {\n      elementHandlers.handler = handler = function () {\n        return _dispatchEvent.apply(element, arguments);\n      };\n    }\n\n    // Create handler object\n    handleObj = {\n      type: type,\n      origType: origType,\n      data: data,\n      callback: callback,\n      selector: selector\n    };\n\n    // Only add an event listener one time for each type of event\n    handlers = events[type];\n    if (!handlers) {\n\n      // Array of handlers for the current type\n      handlers = events[type] = [];\n      handlers.delegateCount = 0;\n\n      // Add event\n      if (element.addEventListener) {\n        element.addEventListener(type, handler, false);\n      }\n    }\n\n    // Add to handlers hash, delegates first\n    if (selector) {\n      handlers.splice(handlers.delegateCount++, 0, handleObj);\n\n    } else {\n      handlers.push(handleObj);\n    }\n  }\n\n  // Unregister events from dom elements\n  function _removeEvent(element, type, callback, selector) {\n    var elementId = _getElementId(element);\n    var handleObj, handlers, name, i;\n\n    handlers = _getHandlers(elementId, type);\n\n    // Return if no handlers for the current event type\n    if (type && !handlers.length) {\n      return;\n    }\n\n    // Remove all handlers if no type provided\n    if (!type) {\n      for (name in handlers) {\n        if (handlers.hasOwnProperty(name)) {\n          _removeEvent(element, name, callback, selector);\n        }\n      }\n      return;\n    }\n\n    // Remove handlers that match\n    for (i = 0; i < handlers.length; i++) {\n      handleObj = handlers[i];\n      if ((!callback || callback === handleObj.callback) && (!selector || selector === handleObj.selector)) {\n\n        // Remove current handler from stack\n        handlers.splice(i--, 1);\n\n        // Decrement delegate count\n        if (handleObj.selector) {\n          handlers.delegateCount--;\n        }\n      }\n    }\n\n    // If no more events for the current type remove the listener and delete its hash\n    if (!handlers.length) {\n      element.removeEventListener(type, handlersHash[elementId].handler, false);\n      delete handlersHash[elementId].events[type];\n    }\n\n    // Remove kimbo reference if element have no more events\n    // If (Kimbo.isEmptyObject(handlersHash[elementId].events)) {\n    //   delete handlersHash[elementId];\n    //   delete element._guid;\n    // }\n  }\n\n  // Triggers a provided event type\n  function _triggerEvent(element, type, data) {\n    var currentElement, lastElement, eventTree, event, special;\n\n    // Don't do events if element is text or comment node\n    // Or if there is no event type at all or type is not a string\n    if ((element && (element.nodeType === 3 || element.nodeType === 8)) || !type || !Kimbo.isString(type)) {\n      return;\n    }\n\n    // Try triggering native focus and blur events\n    if ((type === 'focus' || type === 'blur') && element[type]) {\n      return element[type]();\n    }\n\n    // Create a new writable custom event object\n    event = new Kimbo.Event(type);\n\n    // Triggered programatically\n    event.isTrigger = true;\n\n    // Set the target\n    if (!event.target) {\n      event.target = element;\n    }\n\n    // Include data if any\n    data = data ? Kimbo.makeArray(data) : [];\n\n    // Check if it's a special event\n    special = specialEvents[type] || {};\n\n    // Event goes first\n    data.unshift(event);\n\n    // Generate a stack of [element, event] to be triggered\n    eventTree = [[element, type]];\n    if (!Kimbo.isWindow(element)) {\n\n      // Get all parent elements to bubble event later\n      for (currentElement = element.parentNode; currentElement; currentElement = currentElement.parentNode) {\n        eventTree.push([currentElement, type]);\n        lastElement = currentElement;\n      }\n\n      // Only add window object if we got to document (e.g., not plain obj or detached DOM)\n      if (lastElement && lastElement === element.ownerDocument) {\n        eventTree.push([window, type]);\n      }\n    }\n\n    // Fire handlers up to the document (or the last element)\n    Kimbo.forEach(eventTree, function (branch) {\n      var currentElement = branch[0];\n      var elementId = currentElement._guid;\n      event.type = special.origType || branch[1];\n\n      // If the current element has events of the specified type, dispatch them\n      if (elementId && _getHandlers(elementId, type)) {\n        handlersHash[elementId].handler.apply(currentElement, data);\n      }\n    });\n  }\n\n  // Own defined dispatchEvent()\n  function _dispatchEvent(event) {\n    /* jshint -W040 */\n\n    // Use own event object\n    event = _fixEvent(event);\n\n    var elementId = _getElementId(this);\n    var handlers = _getHandlers(elementId, event.type);\n    var delegateCount = handlers.delegateCount;\n    var args = _.slice.call(arguments);\n    var handlerQueue = [];\n    var currentElement, ret, selMatch, matches, handleObj, selector, i;\n\n    // Set the native event to be the fixed event\n    args[0] = event;\n\n    // Save the delegate target element\n    event.delegateTarget = this;\n\n    // Get delegated handlers if any\n    if (delegateCount) {\n\n      // Go up to the dom finding the elements that matches the current selector from delegated event\n      for (currentElement = event.target; currentElement !== this; currentElement = currentElement.parentNode || this) {\n\n        // Don't do events on disabled elements\n        if (currentElement.disabled !== true || event.type !== 'click') {\n          selMatch = {};\n          matches = [];\n\n          // Loop throgh delegated events\n          for (i = 0; i < delegateCount; i++) {\n            handleObj = handlers[i];\n            selector = handleObj.selector;\n\n            if (!selMatch[selector]) {\n              selMatch[selector] = _.kimbo(currentElement).is(selector);\n            }\n\n            if (selMatch[selector]) {\n              matches.push(handleObj);\n            }\n          }\n\n          if (matches.length) {\n            handlerQueue.push({element: currentElement, matches: matches});\n          }\n        }\n      }\n    }\n\n    // Add the remaining not delegated handlers\n    if (handlers.length > delegateCount) {\n      handlerQueue.push({element: this, matches: handlers.slice(delegateCount)});\n    }\n\n    // Fire callbacks queue\n    Kimbo.forEach(handlerQueue, function (handler) {\n\n      // Only fire handler if event wasn't stopped\n      if (!event.isPropagationStopped()) {\n        event.currentTarget = handler.element;\n\n        Kimbo.forEach(handler.matches, function (handleObj) {\n\n          // Only fire bubble if not stopped\n          if (!event.isImmediatePropagationStopped()) {\n            event.data = handleObj.data;\n            event.handleObj = handleObj;\n\n            // Call original callback, check if its an special event first\n            ret = ((specialEvents[handleObj.origType] || {}).handle || handleObj.callback).apply(handler.element, args);\n\n            // If callback returns false, stop the event\n            if (ret === false) {\n              event.preventDefault();\n              event.stopPropagation();\n            }\n          }\n        });\n      }\n    });\n\n    /* jshint +W040 */\n  }\n\n  function _returnFalse() {\n    return false;\n  }\n\n  function _returnTrue() {\n    return true;\n  }\n\n  Kimbo.Event = function (event) {\n\n    // Is event object\n    if (event && event.type) {\n      this.originalEvent = event;\n      this.type = event.type;\n\n      // The event may have been prevented\n      // Check dom level 3 new attribute and set proper value\n      if (event.defaultPrevented) {\n        this.isDefaultPrevented = _returnTrue;\n      } else {\n        this.isDefaultPrevented = _returnFalse;\n      }\n\n    // Is event type\n    } else {\n      this.type = event;\n    }\n\n    // Create a timestamp if doesn't have one\n    this.timeStamp = (event && event.timeStamp) || Date.now();\n\n    // Made by kimbo, yeah\n    this[Kimbo.ref] = true;\n  };\n\n  // Dom-Level-3-Events compliant\n  Kimbo.Event.prototype = {\n    isDefaultPrevented: _returnFalse,\n    isPropagationStopped: _returnFalse,\n    isImmediatePropagationStopped: _returnFalse,\n\n    preventDefault: function () {\n      this.isDefaultPrevented = _returnTrue;\n\n      // Original event is not present when trigger is called\n      if (!this.isTrigger) {\n        this.originalEvent.preventDefault();\n      }\n    },\n\n    stopPropagation: function () {\n      this.isPropagationStopped = _returnTrue;\n\n      if (!this.isTrigger) {\n        this.originalEvent.stopPropagation();\n      }\n    },\n\n    stopImmediatePropagation: function () {\n      this.isImmediatePropagationStopped = _returnTrue;\n\n      if (!this.isTrigger) {\n        this.originalEvent.stopImmediatePropagation();\n      }\n    }\n  };\n\n  Kimbo.fn.extend({\n    /*\\\n     * $(…).on\n     [ method ]\n     * Add an event handler to the selected elements.\n     > Parameters\n     - type (string) A string name for the event to register.\n     - selector (string) #optional Delegate an event providing a string selector.\n     - data (any) #optional Data to be passed to the handler in `event.data` when an event is triggered.\n     - callback (function) A callback function to execute when the event is triggered.\n     > Usage\n     * Suppose a button element:\n     | <button id='btn'>click me</button>\n     * Register a click event handler\n     | $('#btn').on('click', function (event) {\n     |   console.log('clicked!', event);\n     | });\n     * There are shorthands for all events for example:\n     | $('#btn').click(function (event) {\n     |   console.log('clicked!', event);\n     | });\n     * Passing some data when registering the handler:\n     | $('#btn').on('click', { name: 'denis' }, function (event) {\n     |   // Data passed is inside event.data\n     |   console.log('name:', event.data.name);\n     | });\n     * Here is a list for all the shorthand methods available:\n     | 'blur', 'change', 'click', 'contextmenu', 'dblclick', 'error',\n     | 'focus', 'keydown', 'keypress', 'keyup', 'load', 'mousedown', 'mouseenter', 'mouseleave',\n     | 'mousemove', 'mouseout', 'mouseup', 'mouseover', 'resize', 'scroll', 'select', 'submit', 'unload'\n    \\*/\n    on: function (type, selector, data, callback) {\n      // Prepare the arguments\n\n      // (type, callback)\n      if (!data && !callback) {\n        callback = selector;\n        data = selector = undefined;\n\n      // (type, selector, callback)\n      } else if (!callback) {\n        if (Kimbo.isString(selector)) {\n          callback = data;\n          data = undefined;\n\n        // (type, data, callback)\n        } else {\n          callback = data;\n          data = selector;\n          selector = undefined;\n        }\n      }\n\n      // Don't add events if no callback\n      if (!callback) {\n        return this;\n      }\n\n      type = GESTURES_FALLBACK[type] || type;\n\n      // Add the event\n      return this.each(function (el) {\n        _addEvent(el, type, callback, data, selector);\n      });\n    },\n\n    /*\\\n     * $(…).off\n     [ method ]\n     * Remove an event handler to the selected elements for the specified type, or all of them if no type defined.\n     > Parameters\n     - type (string) #optional A string name for the event to remove, or All if none specified.\n     - selector (string) #optional A string selector to undelegate an event from that element.\n     - callback (function) #optional A specific callback function if there are multiple registered under the same event type\n     > Usage\n     * Suppose a button element:\n     | <button id='btn'>click me</button>\n     * Register a click event handler\n     | $('#btn').on('click', function (event) {\n     |   console.log('clicked!', event);\n     | });\n     * Remove the handler\n     | $('#btn').off('click');\n     * Also you could specify the handler for example:\n     | var firstFunction = function () { console.log('first fn'); };\n     | var secondFunction = function () { console.log('second fn'); };\n     | var btn = $('#btn');\n     | btn.click(firstFunction);\n     | btn.click(secondFunction);\n     * If you want to remove the click event only for the second function, do this:\n     | btn.off('click', secondFunction);\n     * Or if you want to remove All handlers (click and any other attached):\n     | btn.off();\n    \\*/\n    off: function (type, selector, callback) {\n\n      // Prepare the arguments\n\n      // (type, callback)\n      if (Kimbo.isFunction(selector)) {\n        callback = selector;\n        selector = undefined;\n      }\n\n      // Remove the event\n      return this.each(function (el) {\n        _removeEvent(el, type, callback, selector);\n      });\n    },\n\n    /*\\\n     * $(…).trigger\n     [ method ]\n     * Execute all handlers attached to the matched elements for the fiven event type.\n     > Parameters\n     - type (string) #optional A string name for the event to remove, or All if none specified.\n     - data (any) #optional Additional parameters to be passed to the handler in `event.data` when an event is triggered.\n     > Usage\n     * Suppose a button element:\n     | <button id='btn'>click me</button>\n     * Register a click event handler\n     | $('#btn').on('click', function (event, data) {\n     |   console.log('name', data.name);\n     | });\n     * Trigger the event programatically passing some data:\n     | $('#btn').trigger('click', { name: 'denis' });\n     | // 'name denis'\n     * Allow the handler to recieve multiple data:\n     | $('#btn').on('click', function (event, name, last) {\n     |   console.log('name', name);\n     |   console.log('last', last);\n     | });\n     | $('#btn').trigger('click', ['denis', 'ciccale']);\n     | // Name denis\n     | // Last ciccale\n    \\*/\n    trigger: function (type, data) {\n      return this.each(function (el) {\n        _triggerEvent(el, type, data);\n      });\n    }\n  });\n\n  // Shortcut methods for each event type\n  Kimbo.forEach(['blur', 'change', 'click', 'contextmenu', 'dblclick', 'error',\n    'focus', 'keydown', 'keypress', 'keyup', 'load', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove',\n    'mouseout', 'mouseup', 'mouseover', 'resize', 'scroll', 'select', 'submit', 'unload'], function (type) {\n\n    Kimbo.fn[type] = function (data, callback) {\n      return arguments.length > 0 ? this.on(type, null, data, callback) : this.trigger(type);\n    };\n\n    // Set event props for the specific type\n    fixEventProps[type] = KEY_EVENT_RE.test(type) ? KEY_EVENT_PROPS : MOUSE_EVENT_RE.test(type) ? MOUSE_EVENT_PROPS : null;\n  });\n\n  // Fix mouseover and mouseout events to use mouseenter mouseleave\n  Kimbo.forEach({\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  }, function (orig, fix) {\n    specialEvents[orig] = {\n      origType: fix,\n\n      handle: function (event) {\n        var target = this;\n        var related = event.relatedTarget;\n        var handleObj = event.handleObj;\n        var ret;\n\n        if (!related || (related !== target && !query.contains(target, related))) {\n          event.type = handleObj.origType;\n          ret = handleObj.callback.apply(this, arguments);\n          event.type = fix;\n        }\n\n        return ret;\n      }\n    };\n  });\n\n});\n\nKimbo.define('ajax', function () {\n\n  'use strict';\n\n  var NO_CONTENT_RE = /^(?:GET|HEAD)$/;\n  var JSONP_RE = /(\\=)\\?(?=&|$)|\\?\\?/i;\n\n  var MIME_TYPES = {\n    html: 'text/html',\n    json: 'application/json',\n    script: 'text/javascript, application/javascript',\n    text: 'text/plain',\n    xml: 'application/xml, text/xml'\n  };\n\n  var dataParse = {\n    json: Kimbo.parseJSON,\n    xml: Kimbo.parseXML\n  };\n\n  var xhrCallbacks = {};\n\n  // Success and error callbacks\n  Kimbo.forEach(['success', 'error'], function (type) {\n    xhrCallbacks[type] = function (res, msg, xhr, settings) {\n      settings = settings || xhr;\n      if (Kimbo.isFunction(settings[type])) {\n        settings[type].apply(settings.context, arguments);\n      }\n    };\n  });\n\n  function _getResponse(response, type) {\n    return (dataParse[type] ? dataParse[type](response) : response);\n  }\n\n  function _handleResponse(xhr, settings) {\n    var response, contentType;\n\n    // Set dataType if missing\n    if (!settings.dataType) {\n      contentType = xhr.getResponseHeader('Content-Type');\n\n      Kimbo.forEach(MIME_TYPES, function (name, type) {\n        if (type.match(contentType)) {\n          settings.dataType = name;\n          return false;\n        }\n      });\n\n      // Fix settings headers\n      _setHeaders(settings);\n    }\n\n    try {\n      response = _getResponse(xhr.responseText, settings.dataType);\n    } catch (e) {\n      response = false;\n      xhrCallbacks.error('parseerror', e, xhr, settings);\n    }\n\n    return response;\n  }\n\n  function _setHeaders(settings) {\n    if (!settings.crossDomain && !settings.headers['X-Requested-With']) {\n      settings.headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    if (settings.contentType) {\n      settings.headers['Content-Type'] = settings.contentType;\n    }\n\n    settings.headers.Accept = MIME_TYPES[settings.dataType] || '*/*';\n  }\n\n  function _timeout(xhr, settings) {\n    xhr.onreadystatechange = null;\n    xhr.abort();\n    xhrCallbacks.error('error', 'timeout', xhr, settings);\n  }\n\n  function _createAbortTimeout(xhr, settings) {\n    return window.setTimeout(function () {\n      _timeout(xhr, settings);\n    }, settings.timeout);\n  }\n\n  /*\\\n   * $.ajaxSettings\n   [ property ]\n   * Default ajax settings object.\n   > Usage\n   * If you want to change the global and default ajax settings, change this object properties:\n   | $.ajaxSettings.error = function () {\n   |   // Handle any failed ajax request in your app\n   | };\n   | $.ajaxSettings.timeout = 1000; // 1 second\n  \\*/\n  Kimbo.ajaxSettings = {\n    type: 'GET',\n    async: true,\n    success: null,\n    error: null,\n    context: null,\n    headers: {},\n    data: null,\n    crossDomain: false,\n    timeout: 0,\n    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n    xhr: function () {\n      return new window.XMLHttpRequest();\n    }\n  };\n\n  /*\\\n   * $.ajax\n   [ method ]\n   * Perform an asynchronous HTTP (Ajax) request.\n   > Parameters\n   - options (object) #optional An object with options\n   o {\n   o   url (string) Url to make the request.\n   o   type (string) #optional Type of request. Could be `'GET'` or `'POST'`. Default value is `'GET'`.\n   o   async (boolean) #optional Default value is `true` if you want synchronous requests set option to `false`.\n   o   success (function) #optional A function that will be called if the request succeeds. Recieving (response, responseMessage, xhr, settings).\n   o   error (function) #optional A function that will be called if the request fails. Recieving (response, responseMessage, xhr, settings).\n   o   context (object) #optional The context in which all ajax request are made. By default the context are the settings object. Could be any DOM element.\n   o   headers (object) #optional An object with additional header key/value pairs to send along with the request.\n   o   data (string|object) #optional Additional data to send with the request, if it is an object is converted to a query string.\n   o   xhr (function) #optional A function that returns a `new XMLHttpRequest()` object by default.\n   o   crossDomain (boolean) #optional Indicate wether you want to force crossDomain requests. `false` by defualt.\n   o   timeout (number) #optional Set a default timeout in milliseconds for the request.\n   o   contentType (string) #optional The default and finest contentType for most cases is `'application/x-www-form-urlencoded; charset=UTF-8'`.\n   o }\n   = (object) The native xhr object.\n   > Usage\n   * Get a username passing an id to the /users url\n   | $.ajax({\n   |   url '/users',\n   |   data: {\n   |     id: 3\n   |   },\n   |   success: function (response, responseMessage, xhr, settings) {\n   |     // Success...\n   |   },\n   |   error: function (response, responseMessage, xhr, settings) {\n   |     // Error...\n   |   }\n   | });\n  \\*/\n  Kimbo.ajax = function (options) {\n    var settings = Kimbo.extend({}, Kimbo.ajaxSettings, options);\n    var xhr, abortTimeout, callback;\n\n    var hasContent = !NO_CONTENT_RE.test(settings.type);\n\n    // Add data to url\n    if (settings.data && typeof settings.data !== 'string') {\n      settings.data = Kimbo.param(settings.data);\n    }\n\n    if (settings.data && !hasContent) {\n      settings.url += (/\\?/.test(settings.url) ? '&' : '?') + settings.data;\n      delete settings.data;\n    }\n\n    // Set default context\n    if (!settings.context) {\n      settings.context = settings;\n    }\n\n    // Check if its jsonp\n    if (JSONP_RE.test(settings.url)) {\n      return _getJSONP(settings);\n    }\n\n    // Create new instance\n    xhr = settings.xhr();\n\n    // User specified timeout\n    if (settings.timeout > 0) {\n      abortTimeout = _createAbortTimeout(xhr, settings);\n    }\n\n    settings.type = settings.type.toUpperCase();\n\n    // On complete callback\n    callback = function () {\n      var status = xhr.status;\n      var response;\n\n      // Clear timeout\n      window.clearTimeout(abortTimeout);\n\n      // Scuccess\n      if ((status >= 200 && status < 300) || status === 304) {\n        response = _handleResponse(xhr, settings);\n        if (response !== false) {\n          xhrCallbacks.success(response, xhr, settings);\n        }\n\n      // Fail\n      } else {\n        xhrCallbacks.error('error', xhr.statusText, xhr, settings);\n      }\n    };\n\n    // Listen for response\n    xhr.onload = callback;\n\n    // Init request\n    xhr.open(settings.type, settings.url, settings.async);\n\n    // Set settings headers\n    _setHeaders(settings);\n\n    // Set xhr headers\n    Kimbo.forEach(settings.headers, function (header, value) {\n      xhr.setRequestHeader(header, value);\n    });\n\n    // Try to send request\n    xhr.send(settings.data);\n\n    return xhr;\n  };\n\n  /*\\\n   * $.get\n   [ method ]\n   * Load data from the server using HTTP GET request.\n   > Parameters\n   - url (string) A string containing the URL to which the request is sent.\n   - data (string|object) #optional An option string or object with data params to send to the server.\n   - callback (function) A callback function to execute if the request succeeds.\n   - type (string) #optional String with the type of the data to send (intelligent guess by default).\n   > Usage\n   | $.get('url/users.php', { id: '123' }, function (data) {\n   |   // Success\n   |   console.log('response:', data);\n   | });\n   * This method is a shorthand for the $.ajax\n   | $.ajax({\n   |   url: url,\n   |   data: data,\n   |   success: success,\n   |   dataType: dataType\n   | });\n  \\*/\n\n  /*\\\n   * $.post\n   [ method ]\n   * Load data from the server using HTTP POST request.\n   > Parameters\n   - url (string) A string containing the URL to which the request is sent.\n   - data (string|object) #optional An option string or object with data params to send to the server.\n   - callback (function) A callback function to execute if the request succeeds.\n   - type (string) #optional String with the type of the data to send (intelligent guess by default).\n   > Usage\n   | $.post('url/users.php', { user: 'denis', pass: '123' }, function (data) {\n   |   // Success\n   |   console.log('response:', data);\n   | });\n   * This method is a shorthand for the $.ajax\n   | $.ajax({\n   |   type: 'POST',\n   |   url: url,\n   |   data: data,\n   |   success: success,\n   |   dataType: dataType\n   | });\n  \\*/\n  Kimbo.forEach(['get', 'post'], function (method) {\n    Kimbo[method] = function (url, data, callback, type) {\n\n      // Prepare arguments\n      if (Kimbo.isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = null;\n      }\n\n      // Call ajax\n      return Kimbo.ajax({\n        type: method.toUpperCase(),\n        url: url,\n        data: data,\n        success: callback,\n        dataType: type\n      });\n    };\n  });\n\n  Kimbo.extend({\n   /*\\\n    * $.getScript\n    [ method ]\n    * Load a JavaScript file from the server using a GET HTTP request, then execute it.\n    > Parameters\n    - url (string) A string containing the URL to which the request is sent.\n    - callback (function) A callback function to execute if the request succeeds.\n    > Usage\n    | $.getScript('url/script.js', function (data) {\n    |   // Success\n    |   console.log('response:', data);\n    | });\n    * This method is a shorthand for the $.ajax\n    | $.ajax({\n    |   url: url,\n    |   dataType: 'script',\n    |   success: success\n    | });\n   \\*/\n    getScript: function (url, callback) {\n      return Kimbo.get(url, callback, 'script');\n    },\n\n   /*\\\n    * $.getJSON\n    [ method ]\n    * Load data from the server using HTTP POST request.\n    > Parameters\n    - url (string) A string containing the URL to which the request is sent.\n    - data (string|object) #optional An option string or object with data params to send to the server.\n    - callback (function) A callback function to execute if the request succeeds.\n    - type (string) #optional String with the type of the data to send (intelligent guess by default).\n    > Usage\n    | $.getJSON('url/test.json', { id: '2' }, function (data) {\n    |   // Success\n    |   console.log('response:', data);\n    | });\n    * This method is a shorthand for the $.ajax\n    | $.ajax({\n    |   url: url,\n    |   dataType: 'json',\n    |   success: success\n    | });\n    * To get json data with jsonp:\n    | $.getJSON('http://search.twitter.com/search.json?callback=?', 'q=#javascript', function (data) {\n    |   console.log(data);\n    | });\n   \\*/\n    getJSON: function (url, data, callback) {\n      return Kimbo.get(url, data, callback, 'json');\n    }\n  });\n\n  // getJSONP internal use\n  function _getJSONP(settings) {\n    var jsonpCallback = Kimbo.ref + '_' + Date.now();\n    var script = document.createElement('script');\n    var head = document.head;\n    var xhr = {\n      abort: function () {\n        window.clearTimeout(abortTimeout);\n        head.removeChild(script);\n        delete window[jsonpCallback];\n      }\n    };\n    var abortTimeout;\n\n    // User specified timeout\n    if (settings.timeout > 0) {\n      abortTimeout = _createAbortTimeout(xhr, settings);\n    }\n\n    // Set url\n    script.src = settings.url.replace(JSONP_RE, '$1' + jsonpCallback);\n\n    // Jsonp callback\n    window[jsonpCallback] = function (response) {\n\n      // Remove script\n      xhr.abort();\n\n      // Fake xhr\n      Kimbo.extend(xhr, {\n        statusText: 'OK',\n        status: 200,\n        response: response,\n        headers: settings.headers\n      });\n\n      // Success\n      xhrCallbacks.success(response, xhr, settings);\n    };\n\n    // Set settings headers\n    _setHeaders(settings);\n\n    // Apend script to head to make the request\n    head.appendChild(script);\n\n    // Return fake xhr object to abort manually\n    return xhr;\n  }\n\n  /*\\\n   * $.param\n   [ method ]\n   * Create a serialized representation of an object, suitable for use in a URL query string or Ajax request.\n   > Parameters\n   - data (string|object) A string or object to serialize.\n   > Usage\n   | var obj = { name: 'Denis', last: 'Ciccale' };\n   | var serialized = $.param(obj); // 'name=Denis&last=Ciccale'\n  \\*/\n  Kimbo.param = function (data) {\n    var params = '';\n\n    if (Kimbo.isObject(data)) {\n      Kimbo.forEach(data, function (name, value) {\n        params += name + '=' + value + '&';\n      });\n    } else {\n      params = data;\n    }\n\n    return window.encodeURIComponent(params)\n      .replace(/%20/g, '+')\n      .replace(/%\\d[D6F]/g, window.unescape)\n      .replace(/^\\?|&$/g, '');\n  };\n});\n"],"sourceRoot":"/source/"}